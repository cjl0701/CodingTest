"""
# 레퍼런스를 공유하므로(싱글톤), 같은 객체를 가리킨다.
a = [1, 2, 3]
b = a
b[1] = 0
print(a)  # [1, 0, 3]
print(b)  # [1, 0, 3]
print(id(a))  # 1797200868352
print(id(b))  # 1797200868352


# 얉은 복사 : copy()
a = [1, 2, 3]
b = a.copy()
b[1] = 0
print(a)  # [1, 2, 3]
print(b)  # [1, 0, 3]
print(id(a))  # 2565871893824
print(id(b))  # 2565871890496

# 얉은 복사는 그 안의 객체에는 적용되지 않는다.
a = [[1, 2], [3, 4], [5, 6]]
b = a.copy()
print(id(a))  # 2005821617600
print(id(b))  # 2005821619392

b[0][0] = 0
print(a)  # [[0, 2], [3, 4], [5, 6]]
print(b)  # [[0, 2], [3, 4], [5, 6]]
# a,b의 레퍼런스는 다르지만, 그 안의 원소는 동일한 [1,2]를 가리키고 있던 것.
print(id(a[1]))  # 2005821616896
print(id(b[1]))  # 2005821616896


# 깊은 복사
# 해결 방법 1: 직접 복사
a = [[1, 2], [3, 4], [5, 6]]
b = [[e for e in l] for l in a]
print(id(a))  # 2468897945792
print(id(b))  # 2468897947072
b[0][0] = 0
print(a)  # [[1, 2], [3, 4], [5, 6]]
print(b)  # [[0, 2], [3, 4], [5, 6]]
print(id(a[1]))  # 2354759200896
print(id(b[1]))  # 2354759196288

# 해결 방법 2: copy 모듈 사용
import copy

a = [[1, 2], [3, 4], [5, 6]]
b = copy.deepcopy(a)
b[0][0] = 0
print(a)  # [[1, 2], [3, 4], [5, 6]]
print(b)  # [[0, 2], [3, 4], [5, 6]]
print(id(a[1]))  # 2281651638528
print(id(b[1]))  # 2281650514304
"""

a = [[i] * 3 for i in range(4)]
b = [row for row in a]  # 레퍼런스 공유
c = [row[:] for row in a]  # 언패킹해서 새로운 리스트를 만듦
print(id(a[0]))  # 2591456160704
print(id(b[0]))  # 2591456160704
print(id(c[0]))  # 2591456170240
